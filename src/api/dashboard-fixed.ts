import { supabase } from '../utils/supabase';

// Dashboard KPI Types
export interface DashboardKPIs {
  leadsGenerated: number;
  tasksCompleted: number;
  schoolsVisited: number;
  impactScore: number;
  dailyStreak?: number;
  conversionRate?: number;
  activeAmbassadors?: number;
  partnerships?: number;
}

export interface TaskData {
  id: string;
  title: string;
  description?: string;
  priority: 'Low' | 'Medium' | 'High' | 'Urgent';
  status: 'Pending' | 'In Progress' | 'Completed' | 'Cancelled';
  due_date: string;
  progress: number;
  school_id?: string;
  school_name?: string;
}

export interface SchoolData {
  id: string;
  name: string;
  location: string;
  country_code: string;
  status: 'prospect' | 'contacted' | 'visited' | 'partnered' | 'inactive';
  leads: number;
  last_visit?: string;
  ambassador_id?: string;
  ambassador_name?: string;
}

export interface AmbassadorData {
  id: string;
  full_name: string;
  email: string;
  status: 'active' | 'inactive' | 'training' | 'suspended';
  performance_score: number;
  schools_count: number;
  leads_generated: number;
  last_activity: string;
  country_code: string;
}

export interface ActivityData {
  id: string;
  type: 'visit' | 'partnership' | 'task' | 'note';
  title: string;
  description: string;
  timestamp: string;
  user: {
    name: string;
  };
  status?: 'completed' | 'pending';
}

// Ambassador Dashboard API Functions
export const getAmbassadorKPIs = async (ambassadorId: string): Promise<DashboardKPIs> => {
  try {
    // Get leads generated by this ambassador
    const { count: leadsCount, error: leadsError } = await supabase
      .from('visits')
      .select('leads_generated', { count: 'exact', head: true })
      .eq('ambassador_id', ambassadorId);

    if (leadsError) throw leadsError;

    // Get completed tasks
    const { count: tasksCount, error: tasksError } = await supabase
      .from('tasks')
      .select('id', { count: 'exact', head: true })
      .eq('ambassador_id', ambassadorId)
      .eq('status', 'Completed');

    if (tasksError) throw tasksError;

    // Get schools visited
    const { count: schoolsCount, error: schoolsError } = await supabase
      .from('schools')
      .select('id', { count: 'exact', head: true })
      .eq('ambassador_id', ambassadorId);

    if (schoolsError) throw schoolsError;

    // Get performance score from user record
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('performance_score')
      .eq('id', ambassadorId)
      .single();

    if (userError) throw userError;

    // Calculate daily streak (simplified - would need more complex logic)
    const dailyStreak = 7; // Placeholder - would calculate from visit patterns

    return {
      leadsGenerated: leadsCount || 0,
      tasksCompleted: tasksCount || 0,
      schoolsVisited: schoolsCount || 0,
      impactScore: userData?.performance_score || 0,
      dailyStreak
    };
  } catch (error) {
    console.error('Error fetching ambassador KPIs:', error);
    throw error;
  }
};

export const getAmbassadorTasks = async (ambassadorId: string): Promise<TaskData[]> => {
  try {
    const { data, error } = await supabase
      .from('tasks')
      .select(`
        id,
        title,
        description,
        priority,
        status,
        due_date,
        progress,
        school_id,
        schools:school_id (name)
      `)
      .eq('ambassador_id', ambassadorId)
      .order('due_date', { ascending: true });

    if (error) throw error;

    return data?.map(task => ({
      ...task,
      school_name: Array.isArray(task.schools) ? task.schools[0]?.name : task.schools?.name || undefined
    })) || [];
  } catch (error) {
    console.error('Error fetching ambassador tasks:', error);
    throw error;
  }
};

export const getAmbassadorSchools = async (ambassadorId: string): Promise<SchoolData[]> => {
  try {
    const { data, error } = await supabase
      .from('schools')
      .select(`
        id,
        name,
        location,
        country_code,
        status,
        created_at,
        visits (
          id,
          visit_date,
          leads_generated
        )
      `)
      .eq('ambassador_id', ambassadorId)
      .order('name', { ascending: true });

    if (error) throw error;

    return data?.map(school => {
      const totalLeads = school.visits?.reduce((sum, visit) => sum + (visit.leads_generated || 0), 0) || 0;
      const lastVisit = school.visits?.sort((a, b) =>
        new Date(b.visit_date).getTime() - new Date(a.visit_date).getTime()
      )[0]?.visit_date;

      return {
        id: school.id,
        name: school.name,
        location: school.location,
        country_code: school.country_code,
        status: school.status,
        leads: totalLeads,
        last_visit: lastVisit ? new Date(lastVisit).toLocaleDateString() : 'Never'
      };
    }) || [];
  } catch (error) {
    console.error('Error fetching ambassador schools:', error);
    throw error;
  }
};

// Country Lead Dashboard API Functions
export const getCountryLeadKPIs = async (countryCode: string): Promise<DashboardKPIs> => {
  try {
    // Get team members count
    const { count: teamCount, error: teamError } = await supabase
      .from('users')
      .select('id', { count: 'exact', head: true })
      .eq('country_code', countryCode)
      .eq('role', 'ambassador');

    if (teamError) throw teamError;

    // Get schools in pipeline
    const { count: schoolsCount, error: schoolsError } = await supabase
      .from('schools')
      .select('id', { count: 'exact', head: true })
      .eq('country_code', countryCode);

    if (schoolsError) throw schoolsError;

    // Get events this month
    const startOfMonth = new Date();
    startOfMonth.setDate(1);
    const { count: eventsCount, error: eventsError } = await supabase
      .from('events')
      .select('id', { count: 'exact', head: true })
      .eq('country_code', countryCode)
      .gte('event_date', startOfMonth.toISOString().split('T')[0]);

    if (eventsError) throw eventsError;

    // Calculate goal progress (simplified)
    const goalProgress = Math.min(75, Math.floor((schoolsCount || 0) / 40 * 100));

    return {
      leadsGenerated: 0, // Will be calculated from visits
      activeAmbassadors: teamCount || 0,
      schoolsVisited: schoolsCount || 0,
      tasksCompleted: eventsCount || 0,
      impactScore: goalProgress,
      conversionRate: 18 // Would calculate from actual conversion data
    };
  } catch (error) {
    console.error('Error fetching country lead KPIs:', error);
    throw error;
  }
};

export const getCountryAmbassadors = async (countryCode: string): Promise<AmbassadorData[]> => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select(`
        id,
        full_name,
        email,
        status,
        performance_score,
        created_at,
        schools:schools (id),
        visits:visits (leads_generated)
      `)
      .eq('country_code', countryCode)
      .eq('role', 'ambassador')
      .order('full_name', { ascending: true });

    if (error) throw error;

    return data?.map(ambassador => {
      const schoolsCount = Array.isArray(ambassador.schools) ? ambassador.schools.length : 0;
      const leadsGenerated = ambassador.visits?.reduce((sum, visit) => sum + (visit.leads_generated || 0), 0) || 0;
      const lastActivity = ambassador.created_at; // Simplified - would use actual last activity

      return {
        id: ambassador.id,
        full_name: ambassador.full_name,
        email: ambassador.email,
        status: ambassador.status as 'active' | 'inactive' | 'training' | 'suspended',
        performance_score: ambassador.performance_score || 0,
        schools_count: schoolsCount,
        leads_generated: leadsGenerated,
        last_activity: new Date(lastActivity).toLocaleDateString(),
        country_code: countryCode
      };
    }) || [];
  } catch (error) {
    console.error('Error fetching country ambassadors:', error);
    throw error;
  }
};

// Management Dashboard API Functions
export const getManagementKPIs = async (): Promise<DashboardKPIs> => {
  try {
    // Get total students reached
    const { data: visitsData, error: visitsError } = await supabase
      .from('visits')
      .select('students_reached');

    if (visitsError) throw visitsError;

    const studentsReached = visitsData?.reduce((sum, visit) => sum + (visit.students_reached || 0), 0) || 0;

    // Get partnerships count
    const { count: partnershipsCount, error: partnershipsError } = await supabase
      .from('schools')
      .select('id', { count: 'exact', head: true })
      .eq('status', 'partnered');

    if (partnershipsError) throw partnershipsError;

    // Get active ambassadors
    const { count: ambassadorsCount, error: ambassadorsError } = await supabase
      .from('users')
      .select('id', { count: 'exact', head: true })
      .eq('role', 'ambassador')
      .eq('status', 'active');

    if (ambassadorsError) throw ambassadorsError;

    // Calculate conversion rate
    const totalSchools = await supabase
      .from('schools')
      .select('id', { count: 'exact', head: true });

    const conversionRate = totalSchools.count ?
      Math.round((partnershipsCount || 0) / totalSchools.count * 100) : 0;

    return {
      leadsGenerated: studentsReached,
      partnerships: partnershipsCount || 0,
      activeAmbassadors: ambassadorsCount || 0,
      conversionRate,
      tasksCompleted: 0, // Would calculate from tasks
      schoolsVisited: totalSchools.count || 0,
      impactScore: conversionRate
    };
  } catch (error) {
    console.error('Error fetching management KPIs:', error);
    throw error;
  }
};

export const getAllSchools = async (): Promise<SchoolData[]> => {
  try {
    const { data, error } = await supabase
      .from('schools')
      .select(`
        id,
        name,
        location,
        country_code,
        status,
        created_at,
        visits:visits (leads_generated, visit_date),
        users:ambassador_id (full_name)
      `)
      .order('name', { ascending: true });

    if (error) throw error;

    return data?.map(school => {
      const totalLeads = school.visits?.reduce((sum, visit) => sum + (visit.leads_generated || 0), 0) || 0;
      const lastVisit = school.visits?.sort((a, b) =>
        new Date(b.visit_date).getTime() - new Date(a.visit_date).getTime()
      )[0]?.visit_date;

      return {
        id: school.id,
        name: school.name,
        location: school.location,
        country_code: school.country_code,
        status: school.status,
        leads: totalLeads,
        last_visit: lastVisit ? new Date(lastVisit).toLocaleDateString() : 'Never',
        ambassador_name: Array.isArray(school.users)
          ? (school.users[0] as { full_name?: string })?.full_name
          : (school.users as { full_name?: string })?.full_name
      };
    }) || [];
  } catch (error) {
    console.error('Error fetching all schools:', error);
    throw error;
  }
};

// Chart Data Functions
export const getLeadGenerationTrends = async () => {
  try {
    const { data, error } = await supabase
      .from('visits')
      .select('leads_generated, visit_date')
      .order('visit_date', { ascending: true });

    if (error) throw error;

    // Group by month
    const monthlyData = data?.reduce((acc: any, visit) => {
      const month = new Date(visit.visit_date).toLocaleDateString('en-US', { month: 'short' });
      acc[month] = (acc[month] || 0) + (visit.leads_generated || 0);
      return acc;
    }, {});

    return {
      labels: Object.keys(monthlyData || {}),
      datasets: [{
        label: 'Leads Generated',
        data: Object.values(monthlyData || {}),
        borderColor: '#1A5F7A',
        backgroundColor: 'rgba(26, 95, 122, 0.1)'
      }]
    };
  } catch (error) {
    console.error('Error fetching lead generation trends:', error);
    throw error;
  }
};

export const getCountryDistribution = async () => {
  try {
    const { data, error } = await supabase
      .from('schools')
      .select('country_code, countries:country_code (name)')
      .eq('status', 'partnered');

    if (error) throw error;

    const countryData = data?.reduce((acc: any, school) => {
      const countryName = Array.isArray(school.countries) ? school.countries[0]?.name : school.countries?.name || school.country_code;
      acc[countryName] = (acc[countryName] || 0) + 1;
      return acc;
    }, {});

    return {
      labels: Object.keys(countryData || {}),
      datasets: [{
        data: Object.values(countryData || {}),
        backgroundColor: [
          'rgba(26, 95, 122, 0.8)',
          'rgba(244, 196, 48, 0.8)',
          'rgba(38, 162, 105, 0.8)',
          'rgba(108, 92, 231, 0.8)',
          'rgba(225, 112, 85, 0.8)'
        ]
      }]
    };
  } catch (error) {
    console.error('Error fetching country distribution:', error);
    throw error;
  }
};

export const getAmbassadorPerformance = async () => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select(`
        full_name,
        performance_score,
        visits:visits (leads_generated)
      `)
      .eq('role', 'ambassador')
      .eq('status', 'active')
      .order('performance_score', { ascending: false })
      .limit(10);

    if (error) throw error;

    return {
      labels: data?.map(user => user.full_name.split(' ')[0]) || [],
      datasets: [{
        label: 'Performance Score',
        data: data?.map(user => user.performance_score || 0) || [],
        backgroundColor: 'rgba(26, 95, 122, 0.8)'
      }]
    };
  } catch (error) {
    console.error('Error fetching ambassador performance:', error);
    throw error;
  }
};
